// Operating Systems: sample code  (c) Tomáš Hudec
// Synchronization, Barriers
// pthread_barrier_init(3), pthread_barrier_wait(3)

// A barrier is a tool that allows the simultaneous execution of threads
// from the given point.

// PARTIALLY SOLVED
// Replace all the "FIXME" words with the correct word/number
// and remove comments around completed commands.

// we need to define _XOPEN_SOURCE >= 600 for portability (to access barriers)
// alternatively we can define _POSIX_C_SOURCE:

//#if !defined _POSIX_C_SOURCE || _POSIX_C_SOURCE < 200112L
//	#define _POSIX_C_SOURCE 200112L	// this also enables barriers
//#endif

#if !defined _XOPEN_SOURCE || _XOPEN_SOURCE < 600
#	define _XOPEN_SOURCE 600	// enable barriers
#endif

#include <unistd.h>
#include <pthread.h>
#include <errno.h>
#include <stdbool.h>
#include <stdio.h>
#include <string.h>

#include <sys/time.h>
#include <time.h>

#include <stdlib.h>

#define THREADS 10			// the total number of threads

// a barrier declaration
pthread_barrier_t a_barrier;
bool barrier_initialized = false;

// release all allocated resources, used in atexit(3)
void release_resources(void)
{       
	if (barrier_initialized) {
		// release the system resources allocated by the barrier
		/*
		if (pthread_barrier_FIXME(FIXME))
			perror("pthread_barrier_FIXME");
		*/
		barrier_initialized = false;
	}
}

void *thread_func(void *arg)
{
	int id = *(int *)arg;
	struct timeval tv;
	int rc = 0;

	printf("The thread %d is working.\n", id);

	// sleep for some random amount of time (simulate work)
	usleep( 1000 * (1 + (int) (6000.0 * (rand() / (RAND_MAX + 1.0)))) );

	gettimeofday(&tv, NULL);	// get current time
	printf("The thread %d is waiting for the other threads: %ld.%03ld\n", id, tv.tv_sec, tv.tv_usec/1000);

	// wait at the barrier
	/*
	rc = pthread_barrier_FIXME(FIXME);
	*/

	gettimeofday(&tv, NULL);	// get current time

	switch (rc) {	// check the return code
		case PTHREAD_BARRIER_SERIAL_THREAD:
			// this will be executed only once (by only one thread)
			printf("The threads are resumed: %ld.%03ld\n", tv.tv_sec, tv.tv_usec/1000);
			// we can destroy the barrier here
		case 0:
			// this will be executed by all threads
			break;
		default:
			// error
			perror("pthread_barrier_wait");
			exit(EXIT_FAILURE);
	}

	printf("The thread %d is resumed: %ld.%03ld\n", id, tv.tv_sec, tv.tv_usec/1000);

	return NULL;
}

int main(int argc, char *argv[])
{
	pthread_t threads[THREADS];
	int arguments[THREADS];
	int i, rc;

	// initialize random number genereator
	srand(time(NULL) + getpid());

	atexit(release_resources);	// release resources at program exit

	// initialize the barrier to the number of threads
	/*
	if (pthread_barrier_FIXME(&a_barrier, NULL, FIXME)) {
		perror("pthread_barrier_init");
		exit(EXIT_FAILURE);
	}
	*/
	barrier_initialized = true;

	// create threads
	for (i = 0; i < THREADS; i++) {
		arguments[i] = i;
		rc = pthread_create(&threads[i], NULL, thread_func, &arguments[i]);
		if (rc) {
			fprintf(stderr, "pthread_create failed for the thread %d, %s\n", i, strerror(rc));
			exit(EXIT_FAILURE);
		}
	}

	// wait for all threads to terminate
	for (i = 0; i < THREADS; i++) {
		(void) pthread_join(threads[i], NULL);
	}

	// resources are released using atexit(3)

	return 0;
}
